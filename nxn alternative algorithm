import numpy as np
import math
import random as rd
import time
import itertools
n=7
m=3
grid = np.zeros((n+2, n+2))
move = 1

X = list(range(1,n+1))
Y = list(range(1,n+1))

# Request two random integers between 0 and 3 (exclusive)
#i =  np.random.randint(0, high=n, size=2)
M = np.random.choice(X, 1)
N = np.random.choice(Y, 1)
#X.remove(indicesX)
#Y.remove(indicesY)
# Extract the row and column indices
i = np.sum(M, axis=0)
j = np.sum(N, axis=0)

J = i
K = j

def check_rows(i, j, m):
    count = 0
    i = J
    j = K
    while 1 < i < n+4 and grid[i][j] == 1:
        count =+ 1
        i =+ 1
        if count == m:
           return 1
    while 1 < i-count < n+4 and grid[i-count][j] == 1:
        count =+ 1
        if count == m:
           return 1

def check_col(i, j, m):
    i = J
    j = K
    count = 0
    while 1 < j < n+4 and grid[i][j] == 1:
        count =+ 1
        j=j+1
        if count == m:
           return 1
    while 1 < j-count < n+2 and grid[i][j-count] == 1:
        count = count+1
        if count == m:
            return 1

def check_antidia(i, j, m):
    i = J
    j = K
    count = 0
    while 1 < i < n+4 and 1 < j < n+2 and grid[i][j] == 1:
        count = count+1
        j=j-1
        i=i+1
        if count == m:
            return 1
    while 1 < (i - count) < n+2 and  1 < (j + count) < n+4 and grid[i][j] == 1:
        count = count+1
        if count == m:
            return 1

def check_diagonal(i, j, m):
    i = J
    j = K
    count = 0
    while 1 < i < n+2 and -1 < j < n+4 and grid[i][j] == 1:
        count = count+1
        j = j+1
        i = i+1
        if count == m:
            return 1
    while 1 < i-count < n+2 and -1 < j-count < n+4 and grid[i][j] == 1:
        count = count+1
        if count == m:
            return 1

while check_antidia(i, j, m) != 1 and check_diagonal(i, j, m) != 1 and check_col(i, j, m) !=1 and check_rows(i, j, m) !=1 and move < n**2+1:
    start = time.time()
    M = np.random.choice(X, 1)
    N = np.random.choice(Y, 1)
    i = np.sum(M, axis=0)
    j = np.sum(N, axis=0)
    while grid[i][j] == 0:
       move +=1
       if move % 2 == 1:
            grid[i][j] = 1
       else:
            grid[i][j] = -1

time_taken = time.time() - start
print("Time taken: ", time_taken, "s")

print(grid)

